% Version 1 
% Main idea for this part is to have a simple CLI version of the game, 
% without an output of the actual "hangman" images, and have it display
% with unlimited lives
% The word will be pre-selected, no main menu, no restart, etc... just playing a single game.
% 

% CONSTANTS
word_to_guess = 'matlab';
revealed = {'-', '-', '-', '-', '-', '-'};
ALPHABET = {'a','b','c','d','e','f','g','h','i','j','k','l','m', ...
            'n','o','p','q','r','s','t','u','v','w','x','y','z'};

% GAME CONDITIONS 
finished = false; 
won = false;


% PLAYER STATS
guess_count = 0; 
lives = 6;
hint_count = 999999;

% Display instructions
disp("Welcome to HANGMAN! Written by a1986501 for 'MATLAB & C; ENG1002.'")
disp("In this version (v1.0), the game will play after this message. You will have UNLIMITED guesses. To guess, type in any SINGLE ALPHABETIC character.")
disp("You will WIN when you have guessed each letter in the hidden word, which will be revealed at the end.")

while ~(finished)
    if (lives <= 0) % we first check if he has run out of lives as otherwise, we would allow the user to find another 
        finished = true;
        continue;
    end
    fprintf("You have currently made %d guess(es).\n", guess_count);
    fprintf("You currently have %d live(s) left.\n", lives);
    %fprintf("As it stands, the word is currently: %s\n", cell2mat(revealed));
    % Hint
    wants_hint = input("Would you like to use one of your " + hint_count + " hint(s)? Type ANYTHING into the input box for yes, leave empty otherwise. ", 's');
    if ~(isempty(wants_hint)) 
        hint_count = hint_count - 1;
        % find index of first element of revealed array that is a '-'
        index = find(strcmp(revealed, '-'), 1); % strcmp returns 1 when the strings are exactly the same 
        revealed{index} = word_to_guess(index);
        fprintf("You have just usede ONE hint. The le")
       % fprintf("As it stands, the word is currently: %s\n", cell2mat(revealed));
    end
    fprintf("As it stands, the word is currently: %s\n", cell2mat(revealed));
     % INPUT VALIDATION %
    made_guess = false;
    while ~(made_guess) % put user in a loop until they make a VALID guess. 
        guess = input("What are you going to guess? ", 's');
        if ischar(guess) && isscalar(guess) && ismember(guess,ALPHABET) == 1 % is it a character, with one element, and is it a member of the ALPHABET array ...
                                                                             % i.e is it a lowercase alphabetic character?
            made_guess = true; % we can move on now.
        else % make an error
            disp("Sorry, that doesn't seem right. Make sure you are entering a LOWERCASE ALPHABETIC character ('a', 'b', etc...)")
        end
    end

    guess_count = guess_count + 1;
    lives = lives - 1;
    guess = convertStringsToChars(guess); % we need to convert this guess into a character array as we cannot access it otherwise 
    for i = 1:strlength(word_to_guess) % right now this is redundant as the strlength is constant, 
                                       % but when we begin choosing a random word from a list this must use strlength to account for this.
        % disp(string(revealed))
        if (guess == word_to_guess(i))
            revealed{i}=word_to_guess(i);
        end
    end
    if strcmp([revealed{:}], word_to_guess) % if the characters that have been guessed fill up the revealed string, i.e if we have finished
        finished = true; % break out of the main game loop
        won = true; % make sure the game knows that the user has WON rather than LOST so we can print out the correct output later. 
        continue;
    end
end


if won
    disp("Congratulations! You WON! You took " + guess_count + " guess(es). The word was " + word_to_guess + ".")
else
    disp("Sorry! You lost. The word was " + word_to_guess + ".")
end